import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import time
from datetime import datetime, timezone, date,  timedelta
from threading import Timer
from threading import Thread
import typing
import re
import logging
import asyncio
import random
from time import gmtime, strftime
import threading
import json
from typing import Union
import locale
#locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
import wikipedia
import urllib.request
from bs4 import BeautifulSoup





def info_msg_id(peer_id):
    history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})
    msg_id = history['items'][0]['id']
    #nonlocal msg_id
    return msg_id

def write_msg(peer_id, message):
    vk.method('messages.send', {'peer_id': peer_id, 'message': message, 'random_id': random.randint(0, 2048), 'disable_mentions': 1})

def edit_msg(peer_id, message, msg_id, **kwargs):
    vk.method('messages.edit', {'peer_id': peer_id, 'message': message, 'message_id': msg_id, "keep_forward_messages": 1})

async def idm_my(delay, peer_id, command, msg_id):
   await asyncio.sleep(delay)
   if ".–ª –º–æ–¥" in command:
       write_msg(-174105461, "+api (–í–∞—à–∞ —Å–µ–∫—Ä–µ—Ç–∫–∞) https://irisduty.ru/callback")
       edit_msg(peer_id, "–í–∫–ª—é—á–∞—é –í–∞—à IDM", msg_id)

async def rehi(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª —Ä–µ—à–∏" in command:
    	sms1 = command[5:]
    	sms = f"–û—Ç–≤–µ—Ç: {eval(sms1)}"
    	write_msg(peer_id, sms)

async def wiki(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª –≤–∏–∫–∏" in command:
    	text = command[5:]
    	wikipedia.set_lang('ru') 
    	fedr = wikipedia.summary(text)  
    	write_msg(peer_id, fedr, msg_id)  
    	
async def ping(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª –ø–∏–Ω–≥" in command:
	    b = datetime.now().timestamp()
	    a = datetime.now().timestamp()
	    d = str(round(a-b,6))[:-4]
	    sms = f"–ü–∏–Ω–≥ –¥–∞–Ω–Ω–æ–≥–æ –õ–æ–Ω–≥–ü–æ–ª–ª–∞\n–ü–∏–Ω–≥: {d}ms"
	    edit_msg(peer_id, sms)
    
async def time(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª –≤—Ä–µ–º—è" in command:
    	a = datetime.now(timezone(timedelta(hours=+4))).strftime("–°–µ–≥–æ–¥–Ω—è %d %B %Y (%A)\n –í—Ä–µ–º—è —É –í–∞—Å - %H:%M \n –•–æ—Ä–æ—à–µ–≥–æ –í–∞–º –¥–µ–Ω—å–∫–∞!")
    	write_msg(peer_id, a)
    		   
 
def b2s(value: Union[bool, int]) -> str:
    if value:
        return "‚úÖ"
    return "üö´"
 
 
async def user(delay: float, peer_id: int, command: str, msg_id: int):
    await asyncio.sleep(delay)
 
    if command.lower().startswith(".–ª –∫—Ç–æ"):
        history = vk.method(
            'messages.getHistory',
            {
                'count': 1,
                'peer_id': peer_id,
                'rev': 0
            }
        )
 
        user_id = history['items'][0]['reply_message']['from_id']
        url = f'https://vk.com/foaf.php?id={user_id}'
        response = (urllib.request.urlopen(url)).read()
        soup = BeautifulSoup(response, "html.parser")
        date = re.search('<ya:created dc:date="(.+)"></ya:created>', str(soup))
        date = (date.group().split('"')[1])
        dt = datetime.strptime(date, "%Y-%m-%dT%H:%M:%S%z")
        new_date = datetime.strftime(dt, '%d.%m.%Y')
        date_reg = str(new_date)

        user = vk.method(
            'users.get',
            {
                'user_ids': user_id,
                'fields': 'photo_50,status,bdate,blacklisted_by_me,'
                          'blacklisted,photo_max_orig,is_friend,'
                          'last_name_abl,first_name_abl,domain,'
                          'city,followers_count,last_seen,online,sex,is_closed'
            }
        )[0]
        city_name: str = user.get('city', {}).get('title', "–ú—É—Ö–æ—Å—Ä–∞–Ω—Å–∫")
        followers: str = user.get('followers_count', "–ò—Ö –Ω–µ—Ç...")
        date_dr: str = user.get('bdate', "–¢—ã –∫–æ–≥–¥–∞ —Ä–æ–¥–∏–ª—Å—è?0_–æ")
        platform = user.get('last_seen', {}).get('platform', "–ù–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ü–û")
 
        user["blacklisted_by_me"] = b2s(user["blacklisted_by_me"])
        user["blacklisted"] = b2s(user["blacklisted"])
        user["is_closed"] = b2s(user["is_closed"])
        user["is_friend"] = b2s(user["is_friend"])
        user["online"] = 'Online' if user["online"] else 'Offline'
 
        if user['sex'] == 1:
            user['sex'] = "üë±‚Äç‚ôÄÔ∏è"
        elif user['sex'] == 2:
            user['sex'] = "üë®"
        else:
            user["sex"] = "–õ–∞–º–∏–Ω–∞—Ç"

 
        msg = f"""
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user["first_name_abl"]} {user["last_name_abl"]}
        {user["online"]}, {platform}
 
        ID: {user["id"]}
        –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: {user["domain"]}
        –ò–º—è: {user["first_name"]}
        –§–∞–º–∏–ª–∏—è: {user["last_name"]}
        –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_reg}
        –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏–µ: {date_dr}
        –ì–æ—Ä–æ–¥: {city_name}
        –î—Ä—É–∑—å—è: {user["is_friend"]}
        –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {followers}
        –ü–æ–ª: {user["sex"]}
        –ó–∞–∫—Ä—ã—Ç—ã–π –ø—Äo—Ñ–∏–ª—å: {user["is_closed"]}
        –°—Ç–∞—Ç—É—Å: {user["status"]}
        –Ø –≤ —á—Å: {user["blacklisted"]}
        –û–Ω –≤ —á—Å: {user["blacklisted_by_me"]}
        –§–æ—Ç–æ:
        {user["photo_max_orig"]}
        """.replace('    ', '')
        edit_msg(peer_id, msg, msg_id)
        
async def rr(delay: float, peer_id: int, command: str, msg_id: int):
    await asyncio.sleep(delay)
 
    if command.lower().startswith("—Ä—Ä"):
        msg = command[2:]
        history = vk.method(
            'messages.getHistory',
            {
                'count': 1,
                'peer_id': peer_id,
                'rev': 0
            }
        )
 
        id = history['items'][0]['reply_message']['id']
        edit_msg(peer_id, msg, id)
        vk.method("messages.delete", {'message_ids': msg_id, 'delete_for_all': 1})

        	
def bomb(peer_id, message, time):
    vk.method('messages.send',
              {'peer_id': peer_id, 'message': message, 'random_id': random.randint(0, 2048), 'disable_mentions': 1,
               'expire_ttl': time})

        	
async def bomba(delay: float, peer_id: int, command: str, msg_id: int):
    await asyncio.sleep(delay)
 
    if command.lower().startswith(".–ª –±"):
    	time, text = map(str,command[2:].split("|"))
    	arg = time[-1]
    	time = int(time[:-1])
    	if arg == '—á':
    	    time *= 3600
    	if arg == '–º':
    	   time *= 60
    	if time > 86400:
        	write_msg(peer_id, "–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ 24 —á–∞—Å–æ–≤")

    	vk.method("messages.delete", {'message_ids': msg_id, 'delete_for_all': 1})

    	bomb(peer_id, text, time)

async def vls(delay: float, peer_id: int, command: str, msg_id: int):
    await asyncio.sleep(delay)
 
    if command.lower().startswith(".–≤–ª—Å"):
            text = command[4:]
            history = vk.method(
            'messages.getHistory',
            {
                'count': 1,
                'peer_id': peer_id,
                'rev': 0
            })
            user_id = history['items'][0]['reply_message']['from_id']
            user = vk.method(
            'users.get',
            {
                'user_ids': user_id,
                'fields': 'photo_50'
            })[0]
            a = user["id"]
            write_msg(a, text)
            vk.method("messages.delete", {'message_ids': msg_id, 'delete_for_all': 1})

async def scrin(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª —Å–∫—Ä–∏–Ω" in command:
    	vk.method('messages.sendService', {'peer_id': peer_id, 'action_type': "chat_screenshot", 'random_id': 0})
    	vk.method("messages.delete", {'message_ids': msg_id, 'delete_for_all': 1})


async def admin(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª +–∞–¥–º–∏–Ω" in command:
            history = vk.method(
            'messages.getHistory',
            {
                'count': 1,
                'peer_id': peer_id,
                'rev': 0
            })
            id = history['items'][0]['reply_message']['from_id']
            vk.method('messages.setMemberRole', {'peer_id': peer_id, 'member_id': id, 'role': 'admin'})
            edit_msg(peer_id, "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤—ã–¥–∞–Ω—ã, —ä—É—ä!" , msg_id)

async def admin_delete(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª -–∞–¥–º–∏–Ω" in command:
            history = vk.method(
            'messages.getHistory',
            {
                'count': 1,
                'peer_id': peer_id,
                'rev': 0
            })
            id = history['items'][0]['reply_message']['from_id']
            vk.method('messages.setMemberRole', {'peer_id': peer_id, 'member_id': id, 'role': 'member'})
            edit_msg(peer_id, "–í—ã —Å–Ω—è–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞\n Press, F...", msg_id)




async def trans(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª –≥—Å" in command:
        audio = vk.method(
            'messages.getHistory',
            {
                'count': 1,
                'peer_id': peer_id,
                'rev': 0
            }
        )
        
        user_id = audio['items'][0]['reply_message']['from_id']
        
        user = vk.method(
            'users.get',
            {
                'user_ids': user_id,
                'fields': 'photo_50'
            })[0]
        
        text = audio['items'][0]['reply_message']['attachments'][0]['audio_message']['transcript']
        msg = f"""
        ‚úâÔ∏è–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user["first_name"]} {user["last_name"]}
üí¨–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:
        {text}
        """.replace('    ', '')
        edit_msg(peer_id, msg, msg_id)

def attachments(peer_id):
    history = vk.method('messages.getHistory', {'count': 1, 'peer_id': peer_id, 'rev': 0})

    attachments = []
    for attachment in history['items'][0]['attachments']:
        a_type = attachment['type']
        if a_type in ['link']:
            continue
        attachments.append(
            f"{a_type}{attachment[a_type]['owner_id']}_{attachment[a_type]['id']}_{attachment[a_type]['access_key']}"
        )

    return attachments

def edita_msg(peer_id, message, attachments, msg_id, **kwargs):
    data = {'peer_id': peer_id, 'message': message, 'attachment': attachments, 'message_id': msg_id}
    data.update(kwargs)
    vk.method('messages.edit', data)


async def dd_sms(delay, peer_id, command, msg_id):
    await asyncio.sleep(delay)
    if ".–ª –¥–¥–≤—Å–µ" in command or ".–ª –¥–¥" in command:
        history: Optional[Any] = vk.method('messages.getHistory',
                                           {'count': 1, 'peer_id': peer_id, 'rev': 0})
        msg_text: object = history['items'][0]['text']
        peer_id: object = peer_id
        user_id: Optional[Any] = vk.method('users.get', {})
        user_id = user_id[0]['id']
        regexp: str = r"(^[\S]+)|([\S]+)|(\n[\s\S \n]+)"
        _args: List[Any] = re.findall(str(regexp), str(msg_text))
        args = []
        for arg in _args:
            if arg[1] != '':
                args.append(arg[1])
        if len(args) == 1:
            msg_ids: List[str] = []
            for mmsg in vk_info.get_all_history_gens(peer_id):
                if datetime.now().timestamp() - mmsg['date'] > 86400:
                    break
                if mmsg['from_id'] == user_id and None == mmsg.get('action', None):
                    msg_ids.append(str(mmsg['id']))
            try:
                vk.method("messages.delete", dict(message_ids=",".join(msg_ids), delete_for_all=1))
            except:
                message_id = write_msg(peer_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

            t = Timer(2, delete_msg(msg_ids), message_id)
            t.start()
        else:
            argss = args[1:]
            count = ''.join(argss)
            count = int(count)
            msg_ids = []
            for mmsg in vk_info.get_all_history_gen_dd(peer_id):
                if datetime.now().timestamp() - mmsg['date'] > 86400:
                    break
                if mmsg['from_id'] == user_id and None == mmsg.get('action', None):
                    msg_ids.append(str(mmsg['id']))

            msg_idss = []
            for i in range(count):
                msg_idss.append(msg_ids[i])
                edit_msg(peer_id, "&#13;", msg_ids[i])
            message_id = 0
            print(msg_idss)
            try:
                vk.method("messages.delete", {'message_ids': ",".join(msg_idss), 'delete_for_all': 1})
            except:
                message_id = write_msg(peer_id, f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

            t = Timer(2, delete_msg(msg_idss), message_id)
            t.start()
while True:  
    token =  "–í–∞—à –¢–æ–∫–µ–Ω –æ—Ç –≤–∫ –º–µ"

    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∫–∞–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
    vk = vk_api.VkApi(app_id=6146827, token=token)

    # –†–∞–±–æ—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    longpoll = VkLongPoll(vk, wait=0)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    for event in longpoll.listen():

        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if event.type == VkEventType.MESSAGE_NEW:
        
            if event.from_me:
                msg_id = info_msg_id(event.peer_id)
                command = event.text
                try:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    # kirill.py
                    asyncio.run(idm_my(0, event.peer_id, command, msg_id)) #1.  –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ ‚Ññ1
                    asyncio.run(rehi(0, event.peer_id, command, msg_id))#2.  –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                    asyncio.run(ping(0, event.peer_id, command, msg_id))#3.  –ü–∏–Ω–≥
                    asyncio.run(time(0, event.peer_id, command, msg_id))#4.  –í—Ä–µ–º—è
                    asyncio.run(scrin(0, event.peer_id, command, msg_id))#5.  –õ–∏–ø–æ–≤—ã–π —Å–∫—Ä–∏–Ω                    
                    asyncio.run(wiki(0, event.peer_id, command, msg_id))#6.  –í–∏–∫–∏–ø–µ–¥–µ—è
		    asyncio.run(user(0, event.peer_id, command, msg_id))

                    # admin_chat
                    asyncio.run(admin(0, event.peer_id, command, msg_id))#11.  –í—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
                    asyncio.run(admin_delete(0, event.peer_id, command, msg_id))#12.  –°–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞                     

                    # asyncio.run(add_user(0, event.peer_id, command, msg_id))
                    print(command)
                except Exception as error:
                    print(error)
                continue#



